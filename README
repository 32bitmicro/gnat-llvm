This is an experimental LLVM backend to the GNAT front-end.

In order to build GNAT-LLVM from sources, you need to follow these steps:

- Get a check out of the GNAT sources under the llvm-interface directory:

  $ cd llvm-interface
  $ git clone git.adacore.com:gnat gnat_src

- Install gnatpython if not already done:
  https://wiki.adacore.com/IT/Documentation/SoftwareProductionInfrastructure/GNATPython/Install
  (download gnatpython from https://gaia.eu.adacore.com, bottom right corner).

- Create or use an anod sandbox:

  $ cd $HOME
  $ deploy-anod-sandbox wave sandbox
  $ cd sandbox

- Build (and use) cmake, needed to build LLVM:

  $ bin/anod build cmake --when-missing=install
  $ eval `bin/anod setenv cmake`

- Install (and use) a recent GNAT, e.g:

  $ bin/anod install gnat
  $ eval `bin/anod setenv gnat`

- Then build llvm:

  $ cd /path/to/gnat-llvm
  $ make llvm

- Add llvm/llvm-obj/bin in your PATH:

  $ export PATH=$PWD/llvm/llvm-obj/bin:$PATH

- Finally build GNAT-LLVM:

  $ make

This will create a "ready to use" set of directories "bin" and "lib" under
llvm-interface which you can put in your PATH:

  PATH=$PWD/llvm-interface/bin:$PATH

- To run the compiler and produce a native object file:

  $ llvm-gcc -c file.adb

- To debug the compiler:

  $ gdb -args llvm-gnat1 -c file.adb

- To run the ACATS testsuite:

  $ git clone git.adacore.com:acats
  $ cd acats
  $ mkdir -p tmp
  $ ./run_acats_test.py --target=llvm -t tmp --acats-version=4 --disable-cleanup --jobs=24

  You can then investigate any failure by going in the tmp/work/<acats test>
  directory.

- LLVM documentation

  Main entry point: http://llvm.org/docs/
  See in particular: http://llvm.org/docs/LangRef.html and
  http://llvm.org/docs/Frontend/PerformanceTips.html

